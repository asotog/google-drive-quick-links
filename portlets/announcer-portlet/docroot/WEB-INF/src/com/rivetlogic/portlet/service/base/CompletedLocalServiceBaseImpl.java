/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rivetlogic.portlet.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.rivetlogic.portlet.model.Completed;
import com.rivetlogic.portlet.service.CompletedLocalService;
import com.rivetlogic.portlet.service.persistence.CompletedPK;
import com.rivetlogic.portlet.service.persistence.CompletedPersistence;
import com.rivetlogic.portlet.service.persistence.NotCompletedPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the completed local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.rivetlogic.portlet.service.impl.CompletedLocalServiceImpl}.
 * </p>
 *
 * @author charles.rodriguez
 * @see com.rivetlogic.portlet.service.impl.CompletedLocalServiceImpl
 * @see com.rivetlogic.portlet.service.CompletedLocalServiceUtil
 * @generated
 */
public abstract class CompletedLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements CompletedLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.rivetlogic.portlet.service.CompletedLocalServiceUtil} to access the completed local service.
	 */

	/**
	 * Adds the completed to the database. Also notifies the appropriate model listeners.
	 *
	 * @param completed the completed
	 * @return the completed that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Completed addCompleted(Completed completed)
		throws SystemException {
		completed.setNew(true);

		return completedPersistence.update(completed);
	}

	/**
	 * Creates a new completed with the primary key. Does not add the completed to the database.
	 *
	 * @param completedPK the primary key for the new completed
	 * @return the new completed
	 */
	@Override
	public Completed createCompleted(CompletedPK completedPK) {
		return completedPersistence.create(completedPK);
	}

	/**
	 * Deletes the completed with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param completedPK the primary key of the completed
	 * @return the completed that was removed
	 * @throws PortalException if a completed with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Completed deleteCompleted(CompletedPK completedPK)
		throws PortalException, SystemException {
		return completedPersistence.remove(completedPK);
	}

	/**
	 * Deletes the completed from the database. Also notifies the appropriate model listeners.
	 *
	 * @param completed the completed
	 * @return the completed that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Completed deleteCompleted(Completed completed)
		throws SystemException {
		return completedPersistence.remove(completed);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Completed.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return completedPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.rivetlogic.portlet.model.impl.CompletedModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return completedPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.rivetlogic.portlet.model.impl.CompletedModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return completedPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return completedPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return completedPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public Completed fetchCompleted(CompletedPK completedPK)
		throws SystemException {
		return completedPersistence.fetchByPrimaryKey(completedPK);
	}

	/**
	 * Returns the completed with the primary key.
	 *
	 * @param completedPK the primary key of the completed
	 * @return the completed
	 * @throws PortalException if a completed with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Completed getCompleted(CompletedPK completedPK)
		throws PortalException, SystemException {
		return completedPersistence.findByPrimaryKey(completedPK);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return completedPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the completeds.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.rivetlogic.portlet.model.impl.CompletedModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of completeds
	 * @param end the upper bound of the range of completeds (not inclusive)
	 * @return the range of completeds
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Completed> getCompleteds(int start, int end)
		throws SystemException {
		return completedPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of completeds.
	 *
	 * @return the number of completeds
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getCompletedsCount() throws SystemException {
		return completedPersistence.countAll();
	}

	/**
	 * Updates the completed in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param completed the completed
	 * @return the completed that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Completed updateCompleted(Completed completed)
		throws SystemException {
		return completedPersistence.update(completed);
	}

	/**
	 * Returns the completed local service.
	 *
	 * @return the completed local service
	 */
	public com.rivetlogic.portlet.service.CompletedLocalService getCompletedLocalService() {
		return completedLocalService;
	}

	/**
	 * Sets the completed local service.
	 *
	 * @param completedLocalService the completed local service
	 */
	public void setCompletedLocalService(
		com.rivetlogic.portlet.service.CompletedLocalService completedLocalService) {
		this.completedLocalService = completedLocalService;
	}

	/**
	 * Returns the completed remote service.
	 *
	 * @return the completed remote service
	 */
	public com.rivetlogic.portlet.service.CompletedService getCompletedService() {
		return completedService;
	}

	/**
	 * Sets the completed remote service.
	 *
	 * @param completedService the completed remote service
	 */
	public void setCompletedService(
		com.rivetlogic.portlet.service.CompletedService completedService) {
		this.completedService = completedService;
	}

	/**
	 * Returns the completed persistence.
	 *
	 * @return the completed persistence
	 */
	public CompletedPersistence getCompletedPersistence() {
		return completedPersistence;
	}

	/**
	 * Sets the completed persistence.
	 *
	 * @param completedPersistence the completed persistence
	 */
	public void setCompletedPersistence(
		CompletedPersistence completedPersistence) {
		this.completedPersistence = completedPersistence;
	}

	/**
	 * Returns the not completed local service.
	 *
	 * @return the not completed local service
	 */
	public com.rivetlogic.portlet.service.NotCompletedLocalService getNotCompletedLocalService() {
		return notCompletedLocalService;
	}

	/**
	 * Sets the not completed local service.
	 *
	 * @param notCompletedLocalService the not completed local service
	 */
	public void setNotCompletedLocalService(
		com.rivetlogic.portlet.service.NotCompletedLocalService notCompletedLocalService) {
		this.notCompletedLocalService = notCompletedLocalService;
	}

	/**
	 * Returns the not completed remote service.
	 *
	 * @return the not completed remote service
	 */
	public com.rivetlogic.portlet.service.NotCompletedService getNotCompletedService() {
		return notCompletedService;
	}

	/**
	 * Sets the not completed remote service.
	 *
	 * @param notCompletedService the not completed remote service
	 */
	public void setNotCompletedService(
		com.rivetlogic.portlet.service.NotCompletedService notCompletedService) {
		this.notCompletedService = notCompletedService;
	}

	/**
	 * Returns the not completed persistence.
	 *
	 * @return the not completed persistence
	 */
	public NotCompletedPersistence getNotCompletedPersistence() {
		return notCompletedPersistence;
	}

	/**
	 * Sets the not completed persistence.
	 *
	 * @param notCompletedPersistence the not completed persistence
	 */
	public void setNotCompletedPersistence(
		NotCompletedPersistence notCompletedPersistence) {
		this.notCompletedPersistence = notCompletedPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.rivetlogic.portlet.model.Completed",
			completedLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.rivetlogic.portlet.model.Completed");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Completed.class;
	}

	protected String getModelClassName() {
		return Completed.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = completedPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.rivetlogic.portlet.service.CompletedLocalService.class)
	protected com.rivetlogic.portlet.service.CompletedLocalService completedLocalService;
	@BeanReference(type = com.rivetlogic.portlet.service.CompletedService.class)
	protected com.rivetlogic.portlet.service.CompletedService completedService;
	@BeanReference(type = CompletedPersistence.class)
	protected CompletedPersistence completedPersistence;
	@BeanReference(type = com.rivetlogic.portlet.service.NotCompletedLocalService.class)
	protected com.rivetlogic.portlet.service.NotCompletedLocalService notCompletedLocalService;
	@BeanReference(type = com.rivetlogic.portlet.service.NotCompletedService.class)
	protected com.rivetlogic.portlet.service.NotCompletedService notCompletedService;
	@BeanReference(type = NotCompletedPersistence.class)
	protected NotCompletedPersistence notCompletedPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private CompletedLocalServiceClpInvoker _clpInvoker = new CompletedLocalServiceClpInvoker();
}